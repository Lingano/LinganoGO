package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"LinganoGO/config" // Import the docs folder generated by swag
	"LinganoGO/handlers"
	"LinganoGO/middleware"

	httpSwagger "github.com/swaggo/http-swagger"

	gorillaHandlers "github.com/gorilla/handlers" // Import gorilla/handlers
	"github.com/gorilla/mux"
)

// @title LinganoGO API
// @version 1.0
// @description This is the API for LinganoGO application.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host api2.lingano.live
// @BasePath /api
// @schemes https http

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.
func main() {
	// Connect to MongoDB
	if err := config.ConnectDB(); err != nil {
		log.Fatalf("Failed to connect to MongoDB: %v", err)
	}
	// Defer disconnection
	defer config.DisconnectDB()

	// Set up signal handling for graceful shutdown
	stopChan := make(chan os.Signal, 1)
	signal.Notify(stopChan, os.Interrupt, syscall.SIGTERM)
	go func() {
		<-stopChan
		log.Println("Shutting down server...")
		config.DisconnectDB() // Ensure DB is disconnected on shutdown
		os.Exit(0)
	}()

	r := mux.NewRouter()

	// CORS configuration
	// Replace "http://localhost:5173" with your frontend's actual origin
	// For multiple origins, you can list them: []string{"http://localhost:5173", "https://your-frontend.com"}
	allowedOrigins := gorillaHandlers.AllowedOrigins([]string{"http://localhost:5173", "https://localhost:5173"}) // Adjust to your frontend URL
	allowedMethods := gorillaHandlers.AllowedMethods([]string{"GET", "POST", "PUT", "DELETE", "OPTIONS"})
	allowedHeaders := gorillaHandlers.AllowedHeaders([]string{"Content-Type", "Authorization", "X-Requested-With"})
	allowCredentials := gorillaHandlers.AllowCredentials() // If you need to handle cookies/auth headers

	r.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, "Welcome to LinganoGO")
	})

	// Test JSON response
	r.HandleFunc("/test-json", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		response := map[string]string{"message": "This is a test JSON response"}
		json.NewEncoder(w).Encode(response)
	})

	// API Router
	apiRouter := r.PathPrefix("/api").Subrouter()

	// Auth routes (public)
	authRouter := apiRouter.PathPrefix("/auth").Subrouter()
	authRouter.HandleFunc("/register", handlers.RegisterUser).Methods("POST")
	authRouter.HandleFunc("/login", handlers.LoginUser).Methods("POST")

	// Authenticated API routes
	// All routes registered with authenticatedAPIRouter will use JWTMiddleware
	authenticatedAPIRouter := apiRouter.PathPrefix("/app").Subrouter() // Example prefix for authenticated app routes
	authenticatedAPIRouter.Use(middleware.JWTMiddleware)

	// User profile routes
	authenticatedAPIRouter.HandleFunc("/profile", handlers.GetUserProfile).Methods("GET")
	authenticatedAPIRouter.HandleFunc("/profile", handlers.UpdateUserProfile).Methods("PUT")

	// Saved words routes
	authenticatedAPIRouter.HandleFunc("/saved-words", handlers.AddSavedWord).Methods("POST")
	authenticatedAPIRouter.HandleFunc("/saved-words", handlers.GetSavedWords).Methods("GET")
	authenticatedAPIRouter.HandleFunc("/saved-words/{savedWordID}", handlers.DeleteSavedWord).Methods("DELETE")

	// Swagger UI route
	// Make sure this path doesn't conflict with your API paths
	r.PathPrefix("/swagger/").Handler(httpSwagger.WrapHandler)

	log.Println("Starting server on :8081")
	log.Println("Swagger UI available at /swagger/index.html") // Or your host + /swagger/index.html
	// Apply CORS middleware to the main router
	// The order matters: CORS headers should be applied before the router handles the request.
	if err := http.ListenAndServe(":8081", gorillaHandlers.CORS(allowedOrigins, allowedMethods, allowedHeaders, allowCredentials)(r)); err != nil {
		log.Fatal(err)
	}
}
