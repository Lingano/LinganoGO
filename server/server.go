package main

import (
	"log"
	"net/http"
	"os"

	"LinganoGO/config"
	"LinganoGO/graph"

	"github.com/99designs/gqlgen/graphql/handler"
	"github.com/99designs/gqlgen/graphql/playground"
	"github.com/fatih/color"
	"github.com/go-chi/chi"
	"github.com/go-chi/chi/middleware"
)

const defaultPort = "8081"
const horizontalLine = "================================================================"

func displayTitle() {
	color.New(color.FgCyan, color.Bold).Println(`
 ‚ñà‚ñà‚ñì     ‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñà‚ñÑ    ‚ñà   ‚ñÑ‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñÑ‚ñÑ       ‚ñà‚ñà‚ñà‚ñÑ    ‚ñà  ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà  
‚ñì‚ñà‚ñà‚ñí    ‚ñì‚ñà‚ñà‚ñí ‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà  ‚ñà‚ñà‚ñí ‚ñÄ‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ     ‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà ‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí
‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí
‚ñí‚ñà‚ñà‚ñë    ‚ñë‚ñà‚ñà‚ñë‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñí‚ñë‚ñì‚ñà  ‚ñà‚ñà‚ñì‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë
‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë
‚ñë ‚ñí‚ñë‚ñì  ‚ñë‚ñë‚ñì  ‚ñë ‚ñí‚ñë   ‚ñí ‚ñí  ‚ñë‚ñí   ‚ñí  ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñë   ‚ñí ‚ñí ‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë 
‚ñë ‚ñë ‚ñí  ‚ñë ‚ñí ‚ñë‚ñë ‚ñë‚ñë   ‚ñë ‚ñí‚ñë  ‚ñë   ‚ñë   ‚ñí   ‚ñí‚ñí ‚ñë‚ñë ‚ñë‚ñë   ‚ñë ‚ñí‚ñë  ‚ñë ‚ñí ‚ñí‚ñë 
  ‚ñë ‚ñë    ‚ñí ‚ñë   ‚ñë   ‚ñë ‚ñë ‚ñë ‚ñë   ‚ñë   ‚ñë   ‚ñí      ‚ñë   ‚ñë ‚ñë ‚ñë ‚ñë ‚ñë ‚ñí  
    ‚ñë  ‚ñë ‚ñë           ‚ñë       ‚ñë       ‚ñë  ‚ñë         ‚ñë     ‚ñë ‚ñë  
`)
	color.New(color.FgMagenta, color.Bold).Println("                    GraphQL API Server")
	color.New(color.FgYellow).Println("                      Version 1.0.0")
}

func main() {
	// Display title
	displayTitle()

	// Connect to PostgreSQL with Ent
	if err := config.ConnectEntDB(); err != nil {
		log.Fatalf("Failed to connect to PostgreSQL with Ent: %v", err)
	}
	defer config.DisconnectEntDB()

	port := os.Getenv("PORT")
	if port == "" {
		port = defaultPort
	}

	router := chi.NewRouter()
	router.Use(middleware.Logger)

	srv := handler.New(graph.NewExecutableSchema(graph.Config{Resolvers: &graph.Resolver{}}))

	router.Handle("/", playground.Handler("GraphQL playground", "/query"))
	router.Handle("/query", srv)
	color.Red(horizontalLine)
	color.New(color.FgYellow).Print("The port is set to: ")
	color.New(color.FgGreen).Print(port)
	color.New(color.FgYellow).Print("\n")
	color.Yellow("You can change it in the .env file")
	color.Red(horizontalLine)
	color.Green("üöÄ Server ready at http://localhost:%s/", port)
	color.Red(horizontalLine)
	log.Fatal(http.ListenAndServe(":"+port, router))
}
