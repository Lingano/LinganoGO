package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"LinganoGO/config"
	"LinganoGO/ent"
	"LinganoGO/ent/flashcard"
	"LinganoGO/ent/reading"
	"LinganoGO/graph/model"
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"golang.org/x/crypto/bcrypt"
)

// ID is the resolver for the id field.
func (r *flashcardResolver) ID(ctx context.Context, obj *ent.Flashcard) (string, error) {
	return obj.ID.String(), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *flashcardResolver) CreatedAt(ctx context.Context, obj *ent.Flashcard) (string, error) {
	return obj.CreatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// LastReviewedAt is the resolver for the lastReviewedAt field.
func (r *flashcardResolver) LastReviewedAt(ctx context.Context, obj *ent.Flashcard) (*string, error) {
	if obj.LastReviewedAt.IsZero() {
		return nil, nil
	}
	formatted := obj.LastReviewedAt.Format("2006-01-02T15:04:05Z07:00")
	return &formatted, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*ent.User, error) {
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, fmt.Errorf("failed to hash password: %w", err)
	}

	client := config.GetEntClient()
	user, err := client.User.
		Create().
		SetName(input.Name).
		SetEmail(input.Email).
		SetPassword(string(hashedPassword)).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}

	return user, nil
}

// CreateReading is the resolver for the createReading field.
func (r *mutationResolver) CreateReading(ctx context.Context, input model.NewReading) (*ent.Reading, error) {
	userUUID, err := uuid.Parse(input.UserID)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %w", err)
	}

	client := config.GetEntClient()
	reading, err := client.Reading.
		Create().
		SetTitle(input.Title).
		SetUserID(userUUID).
		SetFinished(false).
		SetPublic(false).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create reading: %w", err)
	}

	return reading, nil
}

// UpdateReadingPublicStatus is the resolver for the updateReadingPublicStatus field.
func (r *mutationResolver) UpdateReadingPublicStatus(ctx context.Context, id string, public bool) (*ent.Reading, error) {
	readingUUID, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("invalid reading ID: %w", err)
	}

	client := config.GetEntClient()
	reading, err := client.Reading.
		UpdateOneID(readingUUID).
		SetPublic(public).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update reading: %w", err)
	}

	return reading, nil
}

// CreateFlashcard is the resolver for the createFlashcard field.
func (r *mutationResolver) CreateFlashcard(ctx context.Context, input model.NewFlashcard) (*ent.Flashcard, error) {
	userUUID, err := uuid.Parse(input.UserID)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %w", err)
	}

	client := config.GetEntClient()
	flashcard, err := client.Flashcard.
		Create().
		SetQuestion(input.Question).
		SetAnswer(input.Answer).
		SetUserID(userUUID).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create flashcard: %w", err)
	}

	return flashcard, nil
}

// UpdateFlashcard is the resolver for the updateFlashcard field.
func (r *mutationResolver) UpdateFlashcard(ctx context.Context, id string, question string, answer string) (*ent.Flashcard, error) {
	flashcardUUID, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("invalid flashcard ID: %w", err)
	}

	client := config.GetEntClient()
	flashcard, err := client.Flashcard.
		UpdateOneID(flashcardUUID).
		SetQuestion(question).
		SetAnswer(answer).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update flashcard: %w", err)
	}

	return flashcard, nil
}

// UpdateFlashcardLastReviewed is the resolver for the updateFlashcardLastReviewed field.
func (r *mutationResolver) UpdateFlashcardLastReviewed(ctx context.Context, id string) (*ent.Flashcard, error) {
	flashcardUUID, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("invalid flashcard ID: %w", err)
	}

	client := config.GetEntClient()
	flashcard, err := client.Flashcard.
		UpdateOneID(flashcardUUID).
		SetLastReviewedAt(time.Now()).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update flashcard: %w", err)
	}

	return flashcard, nil
}

// DeleteFlashcard is the resolver for the deleteFlashcard field.
func (r *mutationResolver) DeleteFlashcard(ctx context.Context, id string) (bool, error) {
	flashcardUUID, err := uuid.Parse(id)
	if err != nil {
		return false, fmt.Errorf("invalid flashcard ID: %w", err)
	}

	client := config.GetEntClient()
	err = client.Flashcard.DeleteOneID(flashcardUUID).Exec(ctx)
	if err != nil {
		return false, fmt.Errorf("failed to delete flashcard: %w", err)
	}

	return true, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*ent.Post, error) {
	panic(fmt.Errorf("not implemented: CreatePost - createPost"))
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, body string, draft bool) (*ent.Post, error) {
	panic(fmt.Errorf("not implemented: UpdatePost - updatePost"))
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePost - deletePost"))
}

// ID is the resolver for the id field.
func (r *postResolver) ID(ctx context.Context, obj *ent.Post) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*ent.User, error) {
	userUUID, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %w", err)
	}

	client := config.GetEntClient()
	user, err := client.User.Get(ctx, userUUID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	return user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	client := config.GetEntClient()
	users, err := client.User.Query().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get users: %w", err)
	}

	return users, nil
}

// Admins is the resolver for the admins field.
func (r *queryResolver) Admins(ctx context.Context) ([]*ent.User, error) {
	client := config.GetEntClient()
	users, err := client.User.Query().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get users: %w", err)
	}

	return users, nil
}

// Readings is the resolver for the readings field.
func (r *queryResolver) Readings(ctx context.Context) ([]*ent.Reading, error) {
	client := config.GetEntClient()
	readings, err := client.Reading.Query().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get readings: %w", err)
	}

	return readings, nil
}

// PublicReadings is the resolver for the publicReadings field.
func (r *queryResolver) PublicReadings(ctx context.Context) ([]*ent.Reading, error) {
	client := config.GetEntClient()
	readings, err := client.Reading.Query().
		Where(reading.Public(true)).
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get public readings: %w", err)
	}

	return readings, nil
}

// UserReadings is the resolver for the userReadings field.
func (r *queryResolver) UserReadings(ctx context.Context, userID string) ([]*ent.Reading, error) {
	userUUID, err := uuid.Parse(userID)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %w", err)
	}

	client := config.GetEntClient()
	readings, err := client.Reading.Query().
		Where(reading.UserID(userUUID)).
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get user readings: %w", err)
	}

	return readings, nil
}

// Flashcards is the resolver for the flashcards field.
func (r *queryResolver) Flashcards(ctx context.Context) ([]*ent.Flashcard, error) {
	client := config.GetEntClient()
	flashcards, err := client.Flashcard.Query().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get flashcards: %w", err)
	}

	return flashcards, nil
}

// UserFlashcards is the resolver for the userFlashcards field.
func (r *queryResolver) UserFlashcards(ctx context.Context, userID string) ([]*ent.Flashcard, error) {
	userUUID, err := uuid.Parse(userID)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %w", err)
	}

	client := config.GetEntClient()
	flashcards, err := client.Flashcard.Query().
		Where(flashcard.UserID(userUUID)).
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get user flashcards: %w", err)
	}

	return flashcards, nil
}

// FlashcardsForReview is the resolver for the flashcardsForReview field.
func (r *queryResolver) FlashcardsForReview(ctx context.Context, userID string, daysSince *int) ([]*ent.Flashcard, error) {
	userUUID, err := uuid.Parse(userID)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %w", err)
	}

	client := config.GetEntClient()
	query := client.Flashcard.Query().Where(flashcard.UserID(userUUID))

	if daysSince != nil {
		reviewThreshold := time.Now().AddDate(0, 0, -(*daysSince))
		query = query.Where(flashcard.LastReviewedAtLT(reviewThreshold))
	}

	flashcards, err := query.All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get flashcards for review: %w", err)
	}

	return flashcards, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*ent.Post, error) {
	client := config.GetEntClient()
	posts, err := client.Post.Query().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get posts: %w", err)
	}

	return posts, nil
}

// UserPosts is the resolver for the userPosts field.
func (r *queryResolver) UserPosts(ctx context.Context, userID string) ([]*ent.Post, error) {
	panic(fmt.Errorf("not implemented: UserPosts - userPosts"))
}

// ID is the resolver for the id field.
func (r *readingResolver) ID(ctx context.Context, obj *ent.Reading) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *ent.User) (string, error) {
	return obj.ID.String(), nil
}

// Flashcard returns FlashcardResolver implementation.
func (r *Resolver) Flashcard() FlashcardResolver { return &flashcardResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Reading returns ReadingResolver implementation.
func (r *Resolver) Reading() ReadingResolver { return &readingResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type flashcardResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type readingResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
